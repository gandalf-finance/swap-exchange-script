// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: swap_exchange_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Awaken.Contracts.SwapExchangeContract {

  /// <summary>Holder for reflection information generated from swap_exchange_contract.proto</summary>
  internal static partial class SwapExchangeContractReflection {

    #region Descriptor
    /// <summary>File descriptor for swap_exchange_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SwapExchangeContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chxzd2FwX2V4Y2hhbmdlX2NvbnRyYWN0LnByb3RvGg9hZWxmL2NvcmUucHJv",
            "dG8aEmFlbGYvb3B0aW9ucy5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5",
            "LnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8iTwocU3dh",
            "cFRva2VuVG9UYXJnZXRJbmxpbmVJbnB1dBIVCgV0b2tlbhgBIAEoCzIGLlRv",
            "a2VuEhgKCXBhdGhfaW5mbxgCIAEoCzIFLlBhdGgiTAoOVGhyZXNob2xkaW5w",
            "dXQSGgoSbHBfdG9rZW5fdGhyZXNob2xkGAEgASgDEh4KFmNvbW1vbl90b2tl",
            "bl90aHJlc2hvbGQYAiABKAMihQEKFVN3YXBUb2tlbnNJbmxpbmVJbnB1dBI1",
            "CghwYXRoX21hcBgBIAMoCzIjLlN3YXBUb2tlbnNJbmxpbmVJbnB1dC5QYXRo",
            "TWFwRW50cnkaNQoMUGF0aE1hcEVudHJ5EgsKA2tleRgBIAEoCRIUCgV2YWx1",
            "ZRgCIAEoCzIFLlBhdGg6AjgBIm4KIEN1bXVsYXRpdmVUb2tlbkFtb3VudElu",
            "bGluZUlucHV0Eg4KBnRva2VuQRgBIAEoCRIOCgZ0b2tlbkIYAiABKAkSFAoM",
            "dG9rZW5BQmVmb3JlGAMgASgDEhQKDHRva2VuQkJlZm9yZRgEIAEoAyK2AQoP",
            "SW5pdGlhbGl6ZUlucHV0EhwKBU9ud2VyGAEgASgLMg0uYWVsZi5BZGRyZXNz",
            "EhQKDHRhcmdldF90b2tlbhgCIAEoCRIfCghSZWNlaXZvchgDIAEoCzINLmFl",
            "bGYuQWRkcmVzcxIkCg1zd2FwX2NvbnRyYWN0GAQgASgLMg0uYWVsZi5BZGRy",
            "ZXNzEigKEWxwX3Rva2VuX2NvbnRyYWN0GAUgASgLMg0uYWVsZi5BZGRyZXNz",
            "IjMKGlJlbW92ZUxpcXVpZGl0eUlubGluZUlucHV0EhUKBXRva2VuGAEgASgL",
            "MgYuVG9rZW4iPwoEUGF0aBINCgV2YWx1ZRgBIAMoCRISCgpzbGlwX3BvaW50",
            "GAIgASgDEhQKDGV4cGVjdF9wcmljZRgDIAEoCSKeAQoPU3dhcFRva2Vuc0lu",
            "cHV0Ei8KCHBhdGhfbWFwGAEgAygLMh0uU3dhcFRva2Vuc0lucHV0LlBhdGhN",
            "YXBFbnRyeRIjCg9zd2FwX3Rva2VuX2xpc3QYAiABKAsyCi5Ub2tlbkxpc3Qa",
            "NQoMUGF0aE1hcEVudHJ5EgsKA2tleRgBIAEoCRIUCgV2YWx1ZRgCIAEoCzIF",
            "LlBhdGg6AjgBIi0KBVRva2VuEhQKDHRva2VuX3N5bWJvbBgBIAEoCRIOCgZh",
            "bW91bnQYAiABKAMiKAoJVG9rZW5MaXN0EhsKC3Rva2Vuc19pbmZvGAEgAygL",
            "MgYuVG9rZW4iTQoPVGhyZXNob2xkT3V0cHV0EhoKEmxwX3Rva2VuX3RocmVz",
            "aG9sZBgBIAEoAxIeChZjb21tb25fdG9rZW5fdGhyZXNob2xkGAIgASgDIlsK",
            "D1N3YXBSZXN1bHRFdmVudBIOCgZzeW1ib2wYASABKAkSDgoGcmVzdWx0GAIg",
            "ASgIEg4KBmFtb3VudBgDIAEoAxISCgppc19scHRva2VuGAQgASgIOgSguxgB",
            "MvsHChRTd2FwRXhjaGFuZ2VDb250cmFjdBI4CgpJbml0aWFsaXplEhAuSW5p",
            "dGlhbGl6ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASOgoMU3dh",
            "cExwVG9rZW5zEhAuU3dhcFRva2Vuc0lucHV0GhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASPgoQU3dhcENvbW1vblRva2VucxIQLlN3YXBUb2tlbnNJbnB1",
            "dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjYKC1NldFJlY2Vpdm9yEg0u",
            "YWVsZi5BZGRyZXNzGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASSAoOU2V0",
            "VGFyZ2V0VG9rZW4SHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUaFi5n",
            "b29nbGUucHJvdG9idWYuRW1wdHkiABJKCh1TZXRTd2FwVG9UYXJnZXRUb2tl",
            "blRocmVzaG9sZBIPLlRocmVzaG9sZGlucHV0GhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASTgoVUmVtb3ZlTGlxdWlkaXR5SW5saW5lEhsuUmVtb3ZlTGlx",
            "dWlkaXR5SW5saW5lSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJa",
            "ChtDdW11bGF0aXZlVG9rZW5BbW91bnRJbmxpbmUSIS5DdW11bGF0aXZlVG9r",
            "ZW5BbW91bnRJbmxpbmVJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIA",
            "EkQKEFN3YXBUb2tlbnNJbmxpbmUSFi5Td2FwVG9rZW5zSW5saW5lSW5wdXQa",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJSChdTd2FwVG9rZW5Ub1Rhcmdl",
            "dElubGluZRIdLlN3YXBUb2tlblRvVGFyZ2V0SW5saW5lSW5wdXQaFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkiABI1CgVPd25lchIWLmdvb2dsZS5wcm90b2J1",
            "Zi5FbXB0eRoNLmFlbGYuQWRkcmVzcyIFiIn3AQESSgoLVGFyZ2V0VG9rZW4S",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkaHC5nb29nbGUucHJvdG9idWYuU3Ry",
            "aW5nVmFsdWUiBYiJ9wEBEjgKCFJlY2Vpdm9yEhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5Gg0uYWVsZi5BZGRyZXNzIgWIifcBARI8CglUaHJlc2hvbGQSFi5n",
            "b29nbGUucHJvdG9idWYuRW1wdHkaEC5UaHJlc2hvbGRPdXRwdXQiBYiJ9wEB",
            "Gh6yzPYBGVN3YXBFeGNoYW5nZUNvbnRyYWN0U3RhdGVCKKoCJUF3YWtlbi5D",
            "b250cmFjdHMuU3dhcEV4Y2hhbmdlQ29udHJhY3RiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.SwapTokenToTargetInlineInput), global::Awaken.Contracts.SwapExchangeContract.SwapTokenToTargetInlineInput.Parser, new[]{ "Token", "PathInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.Thresholdinput), global::Awaken.Contracts.SwapExchangeContract.Thresholdinput.Parser, new[]{ "LpTokenThreshold", "CommonTokenThreshold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.SwapTokensInlineInput), global::Awaken.Contracts.SwapExchangeContract.SwapTokensInlineInput.Parser, new[]{ "PathMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.CumulativeTokenAmountInlineInput), global::Awaken.Contracts.SwapExchangeContract.CumulativeTokenAmountInlineInput.Parser, new[]{ "TokenA", "TokenB", "TokenABefore", "TokenBBefore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.InitializeInput), global::Awaken.Contracts.SwapExchangeContract.InitializeInput.Parser, new[]{ "Onwer", "TargetToken", "Receivor", "SwapContract", "LpTokenContract" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.RemoveLiquidityInlineInput), global::Awaken.Contracts.SwapExchangeContract.RemoveLiquidityInlineInput.Parser, new[]{ "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.Path), global::Awaken.Contracts.SwapExchangeContract.Path.Parser, new[]{ "Value", "SlipPoint", "ExpectPrice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.SwapTokensInput), global::Awaken.Contracts.SwapExchangeContract.SwapTokensInput.Parser, new[]{ "PathMap", "SwapTokenList" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.Token), global::Awaken.Contracts.SwapExchangeContract.Token.Parser, new[]{ "TokenSymbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.TokenList), global::Awaken.Contracts.SwapExchangeContract.TokenList.Parser, new[]{ "TokensInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.ThresholdOutput), global::Awaken.Contracts.SwapExchangeContract.ThresholdOutput.Parser, new[]{ "LpTokenThreshold", "CommonTokenThreshold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.SwapExchangeContract.SwapResultEvent), global::Awaken.Contracts.SwapExchangeContract.SwapResultEvent.Parser, new[]{ "Symbol", "Result", "Amount", "IsLptoken" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// input
  /// </summary>
  internal sealed partial class SwapTokenToTargetInlineInput : pb::IMessage<SwapTokenToTargetInlineInput> {
    private static readonly pb::MessageParser<SwapTokenToTargetInlineInput> _parser = new pb::MessageParser<SwapTokenToTargetInlineInput>(() => new SwapTokenToTargetInlineInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapTokenToTargetInlineInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokenToTargetInlineInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokenToTargetInlineInput(SwapTokenToTargetInlineInput other) : this() {
      token_ = other.token_ != null ? other.token_.Clone() : null;
      pathInfo_ = other.pathInfo_ != null ? other.pathInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokenToTargetInlineInput Clone() {
      return new SwapTokenToTargetInlineInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private global::Awaken.Contracts.SwapExchangeContract.Token token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Awaken.Contracts.SwapExchangeContract.Token Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    /// <summary>Field number for the "path_info" field.</summary>
    public const int PathInfoFieldNumber = 2;
    private global::Awaken.Contracts.SwapExchangeContract.Path pathInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Awaken.Contracts.SwapExchangeContract.Path PathInfo {
      get { return pathInfo_; }
      set {
        pathInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapTokenToTargetInlineInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapTokenToTargetInlineInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Token, other.Token)) return false;
      if (!object.Equals(PathInfo, other.PathInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (token_ != null) hash ^= Token.GetHashCode();
      if (pathInfo_ != null) hash ^= PathInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (token_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Token);
      }
      if (pathInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PathInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (token_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
      }
      if (pathInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PathInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapTokenToTargetInlineInput other) {
      if (other == null) {
        return;
      }
      if (other.token_ != null) {
        if (token_ == null) {
          Token = new global::Awaken.Contracts.SwapExchangeContract.Token();
        }
        Token.MergeFrom(other.Token);
      }
      if (other.pathInfo_ != null) {
        if (pathInfo_ == null) {
          PathInfo = new global::Awaken.Contracts.SwapExchangeContract.Path();
        }
        PathInfo.MergeFrom(other.PathInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (token_ == null) {
              Token = new global::Awaken.Contracts.SwapExchangeContract.Token();
            }
            input.ReadMessage(Token);
            break;
          }
          case 18: {
            if (pathInfo_ == null) {
              PathInfo = new global::Awaken.Contracts.SwapExchangeContract.Path();
            }
            input.ReadMessage(PathInfo);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Thresholdinput : pb::IMessage<Thresholdinput> {
    private static readonly pb::MessageParser<Thresholdinput> _parser = new pb::MessageParser<Thresholdinput>(() => new Thresholdinput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Thresholdinput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Thresholdinput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Thresholdinput(Thresholdinput other) : this() {
      lpTokenThreshold_ = other.lpTokenThreshold_;
      commonTokenThreshold_ = other.commonTokenThreshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Thresholdinput Clone() {
      return new Thresholdinput(this);
    }

    /// <summary>Field number for the "lp_token_threshold" field.</summary>
    public const int LpTokenThresholdFieldNumber = 1;
    private long lpTokenThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LpTokenThreshold {
      get { return lpTokenThreshold_; }
      set {
        lpTokenThreshold_ = value;
      }
    }

    /// <summary>Field number for the "common_token_threshold" field.</summary>
    public const int CommonTokenThresholdFieldNumber = 2;
    private long commonTokenThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommonTokenThreshold {
      get { return commonTokenThreshold_; }
      set {
        commonTokenThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Thresholdinput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Thresholdinput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LpTokenThreshold != other.LpTokenThreshold) return false;
      if (CommonTokenThreshold != other.CommonTokenThreshold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LpTokenThreshold != 0L) hash ^= LpTokenThreshold.GetHashCode();
      if (CommonTokenThreshold != 0L) hash ^= CommonTokenThreshold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LpTokenThreshold != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LpTokenThreshold);
      }
      if (CommonTokenThreshold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CommonTokenThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LpTokenThreshold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LpTokenThreshold);
      }
      if (CommonTokenThreshold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommonTokenThreshold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Thresholdinput other) {
      if (other == null) {
        return;
      }
      if (other.LpTokenThreshold != 0L) {
        LpTokenThreshold = other.LpTokenThreshold;
      }
      if (other.CommonTokenThreshold != 0L) {
        CommonTokenThreshold = other.CommonTokenThreshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LpTokenThreshold = input.ReadInt64();
            break;
          }
          case 16: {
            CommonTokenThreshold = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SwapTokensInlineInput : pb::IMessage<SwapTokensInlineInput> {
    private static readonly pb::MessageParser<SwapTokensInlineInput> _parser = new pb::MessageParser<SwapTokensInlineInput>(() => new SwapTokensInlineInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapTokensInlineInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokensInlineInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokensInlineInput(SwapTokensInlineInput other) : this() {
      pathMap_ = other.pathMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokensInlineInput Clone() {
      return new SwapTokensInlineInput(this);
    }

    /// <summary>Field number for the "path_map" field.</summary>
    public const int PathMapFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Awaken.Contracts.SwapExchangeContract.Path>.Codec _map_pathMap_codec
        = new pbc::MapField<string, global::Awaken.Contracts.SwapExchangeContract.Path>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Awaken.Contracts.SwapExchangeContract.Path.Parser), 10);
    private readonly pbc::MapField<string, global::Awaken.Contracts.SwapExchangeContract.Path> pathMap_ = new pbc::MapField<string, global::Awaken.Contracts.SwapExchangeContract.Path>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Awaken.Contracts.SwapExchangeContract.Path> PathMap {
      get { return pathMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapTokensInlineInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapTokensInlineInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PathMap.Equals(other.PathMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PathMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pathMap_.WriteTo(output, _map_pathMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pathMap_.CalculateSize(_map_pathMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapTokensInlineInput other) {
      if (other == null) {
        return;
      }
      pathMap_.Add(other.pathMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pathMap_.AddEntriesFrom(input, _map_pathMap_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CumulativeTokenAmountInlineInput : pb::IMessage<CumulativeTokenAmountInlineInput> {
    private static readonly pb::MessageParser<CumulativeTokenAmountInlineInput> _parser = new pb::MessageParser<CumulativeTokenAmountInlineInput>(() => new CumulativeTokenAmountInlineInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CumulativeTokenAmountInlineInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CumulativeTokenAmountInlineInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CumulativeTokenAmountInlineInput(CumulativeTokenAmountInlineInput other) : this() {
      tokenA_ = other.tokenA_;
      tokenB_ = other.tokenB_;
      tokenABefore_ = other.tokenABefore_;
      tokenBBefore_ = other.tokenBBefore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CumulativeTokenAmountInlineInput Clone() {
      return new CumulativeTokenAmountInlineInput(this);
    }

    /// <summary>Field number for the "tokenA" field.</summary>
    public const int TokenAFieldNumber = 1;
    private string tokenA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenA {
      get { return tokenA_; }
      set {
        tokenA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenB" field.</summary>
    public const int TokenBFieldNumber = 2;
    private string tokenB_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenB {
      get { return tokenB_; }
      set {
        tokenB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenABefore" field.</summary>
    public const int TokenABeforeFieldNumber = 3;
    private long tokenABefore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenABefore {
      get { return tokenABefore_; }
      set {
        tokenABefore_ = value;
      }
    }

    /// <summary>Field number for the "tokenBBefore" field.</summary>
    public const int TokenBBeforeFieldNumber = 4;
    private long tokenBBefore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenBBefore {
      get { return tokenBBefore_; }
      set {
        tokenBBefore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CumulativeTokenAmountInlineInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CumulativeTokenAmountInlineInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenA != other.TokenA) return false;
      if (TokenB != other.TokenB) return false;
      if (TokenABefore != other.TokenABefore) return false;
      if (TokenBBefore != other.TokenBBefore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenA.Length != 0) hash ^= TokenA.GetHashCode();
      if (TokenB.Length != 0) hash ^= TokenB.GetHashCode();
      if (TokenABefore != 0L) hash ^= TokenABefore.GetHashCode();
      if (TokenBBefore != 0L) hash ^= TokenBBefore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenA.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenA);
      }
      if (TokenB.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenB);
      }
      if (TokenABefore != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TokenABefore);
      }
      if (TokenBBefore != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TokenBBefore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenA);
      }
      if (TokenB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenB);
      }
      if (TokenABefore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenABefore);
      }
      if (TokenBBefore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenBBefore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CumulativeTokenAmountInlineInput other) {
      if (other == null) {
        return;
      }
      if (other.TokenA.Length != 0) {
        TokenA = other.TokenA;
      }
      if (other.TokenB.Length != 0) {
        TokenB = other.TokenB;
      }
      if (other.TokenABefore != 0L) {
        TokenABefore = other.TokenABefore;
      }
      if (other.TokenBBefore != 0L) {
        TokenBBefore = other.TokenBBefore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenA = input.ReadString();
            break;
          }
          case 18: {
            TokenB = input.ReadString();
            break;
          }
          case 24: {
            TokenABefore = input.ReadInt64();
            break;
          }
          case 32: {
            TokenBBefore = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      onwer_ = other.onwer_ != null ? other.onwer_.Clone() : null;
      targetToken_ = other.targetToken_;
      receivor_ = other.receivor_ != null ? other.receivor_.Clone() : null;
      swapContract_ = other.swapContract_ != null ? other.swapContract_.Clone() : null;
      lpTokenContract_ = other.lpTokenContract_ != null ? other.lpTokenContract_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "Onwer" field.</summary>
    public const int OnwerFieldNumber = 1;
    private global::AElf.Types.Address onwer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Onwer {
      get { return onwer_; }
      set {
        onwer_ = value;
      }
    }

    /// <summary>Field number for the "target_token" field.</summary>
    public const int TargetTokenFieldNumber = 2;
    private string targetToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetToken {
      get { return targetToken_; }
      set {
        targetToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Receivor" field.</summary>
    public const int ReceivorFieldNumber = 3;
    private global::AElf.Types.Address receivor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Receivor {
      get { return receivor_; }
      set {
        receivor_ = value;
      }
    }

    /// <summary>Field number for the "swap_contract" field.</summary>
    public const int SwapContractFieldNumber = 4;
    private global::AElf.Types.Address swapContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address SwapContract {
      get { return swapContract_; }
      set {
        swapContract_ = value;
      }
    }

    /// <summary>Field number for the "lp_token_contract" field.</summary>
    public const int LpTokenContractFieldNumber = 5;
    private global::AElf.Types.Address lpTokenContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address LpTokenContract {
      get { return lpTokenContract_; }
      set {
        lpTokenContract_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Onwer, other.Onwer)) return false;
      if (TargetToken != other.TargetToken) return false;
      if (!object.Equals(Receivor, other.Receivor)) return false;
      if (!object.Equals(SwapContract, other.SwapContract)) return false;
      if (!object.Equals(LpTokenContract, other.LpTokenContract)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (onwer_ != null) hash ^= Onwer.GetHashCode();
      if (TargetToken.Length != 0) hash ^= TargetToken.GetHashCode();
      if (receivor_ != null) hash ^= Receivor.GetHashCode();
      if (swapContract_ != null) hash ^= SwapContract.GetHashCode();
      if (lpTokenContract_ != null) hash ^= LpTokenContract.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (onwer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Onwer);
      }
      if (TargetToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetToken);
      }
      if (receivor_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Receivor);
      }
      if (swapContract_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SwapContract);
      }
      if (lpTokenContract_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LpTokenContract);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (onwer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Onwer);
      }
      if (TargetToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetToken);
      }
      if (receivor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receivor);
      }
      if (swapContract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapContract);
      }
      if (lpTokenContract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LpTokenContract);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.onwer_ != null) {
        if (onwer_ == null) {
          Onwer = new global::AElf.Types.Address();
        }
        Onwer.MergeFrom(other.Onwer);
      }
      if (other.TargetToken.Length != 0) {
        TargetToken = other.TargetToken;
      }
      if (other.receivor_ != null) {
        if (receivor_ == null) {
          Receivor = new global::AElf.Types.Address();
        }
        Receivor.MergeFrom(other.Receivor);
      }
      if (other.swapContract_ != null) {
        if (swapContract_ == null) {
          SwapContract = new global::AElf.Types.Address();
        }
        SwapContract.MergeFrom(other.SwapContract);
      }
      if (other.lpTokenContract_ != null) {
        if (lpTokenContract_ == null) {
          LpTokenContract = new global::AElf.Types.Address();
        }
        LpTokenContract.MergeFrom(other.LpTokenContract);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (onwer_ == null) {
              Onwer = new global::AElf.Types.Address();
            }
            input.ReadMessage(Onwer);
            break;
          }
          case 18: {
            TargetToken = input.ReadString();
            break;
          }
          case 26: {
            if (receivor_ == null) {
              Receivor = new global::AElf.Types.Address();
            }
            input.ReadMessage(Receivor);
            break;
          }
          case 34: {
            if (swapContract_ == null) {
              SwapContract = new global::AElf.Types.Address();
            }
            input.ReadMessage(SwapContract);
            break;
          }
          case 42: {
            if (lpTokenContract_ == null) {
              LpTokenContract = new global::AElf.Types.Address();
            }
            input.ReadMessage(LpTokenContract);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RemoveLiquidityInlineInput : pb::IMessage<RemoveLiquidityInlineInput> {
    private static readonly pb::MessageParser<RemoveLiquidityInlineInput> _parser = new pb::MessageParser<RemoveLiquidityInlineInput>(() => new RemoveLiquidityInlineInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveLiquidityInlineInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityInlineInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityInlineInput(RemoveLiquidityInlineInput other) : this() {
      token_ = other.token_ != null ? other.token_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveLiquidityInlineInput Clone() {
      return new RemoveLiquidityInlineInput(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private global::Awaken.Contracts.SwapExchangeContract.Token token_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Awaken.Contracts.SwapExchangeContract.Token Token {
      get { return token_; }
      set {
        token_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveLiquidityInlineInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveLiquidityInlineInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Token, other.Token)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (token_ != null) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (token_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (token_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveLiquidityInlineInput other) {
      if (other == null) {
        return;
      }
      if (other.token_ != null) {
        if (token_ == null) {
          Token = new global::Awaken.Contracts.SwapExchangeContract.Token();
        }
        Token.MergeFrom(other.Token);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (token_ == null) {
              Token = new global::Awaken.Contracts.SwapExchangeContract.Token();
            }
            input.ReadMessage(Token);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Path : pb::IMessage<Path> {
    private static readonly pb::MessageParser<Path> _parser = new pb::MessageParser<Path>(() => new Path());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Path> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path(Path other) : this() {
      value_ = other.value_.Clone();
      slipPoint_ = other.slipPoint_;
      expectPrice_ = other.expectPrice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Path Clone() {
      return new Path(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_value_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> value_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Value {
      get { return value_; }
    }

    /// <summary>Field number for the "slip_point" field.</summary>
    public const int SlipPointFieldNumber = 2;
    private long slipPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SlipPoint {
      get { return slipPoint_; }
      set {
        slipPoint_ = value;
      }
    }

    /// <summary>Field number for the "expect_price" field.</summary>
    public const int ExpectPriceFieldNumber = 3;
    private string expectPrice_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpectPrice {
      get { return expectPrice_; }
      set {
        expectPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Path);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Path other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      if (SlipPoint != other.SlipPoint) return false;
      if (ExpectPrice != other.ExpectPrice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (SlipPoint != 0L) hash ^= SlipPoint.GetHashCode();
      if (ExpectPrice.Length != 0) hash ^= ExpectPrice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (SlipPoint != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SlipPoint);
      }
      if (ExpectPrice.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExpectPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (SlipPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SlipPoint);
      }
      if (ExpectPrice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExpectPrice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Path other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      if (other.SlipPoint != 0L) {
        SlipPoint = other.SlipPoint;
      }
      if (other.ExpectPrice.Length != 0) {
        ExpectPrice = other.ExpectPrice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
          case 16: {
            SlipPoint = input.ReadInt64();
            break;
          }
          case 26: {
            ExpectPrice = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SwapTokensInput : pb::IMessage<SwapTokensInput> {
    private static readonly pb::MessageParser<SwapTokensInput> _parser = new pb::MessageParser<SwapTokensInput>(() => new SwapTokensInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapTokensInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokensInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokensInput(SwapTokensInput other) : this() {
      pathMap_ = other.pathMap_.Clone();
      swapTokenList_ = other.swapTokenList_ != null ? other.swapTokenList_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapTokensInput Clone() {
      return new SwapTokensInput(this);
    }

    /// <summary>Field number for the "path_map" field.</summary>
    public const int PathMapFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Awaken.Contracts.SwapExchangeContract.Path>.Codec _map_pathMap_codec
        = new pbc::MapField<string, global::Awaken.Contracts.SwapExchangeContract.Path>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Awaken.Contracts.SwapExchangeContract.Path.Parser), 10);
    private readonly pbc::MapField<string, global::Awaken.Contracts.SwapExchangeContract.Path> pathMap_ = new pbc::MapField<string, global::Awaken.Contracts.SwapExchangeContract.Path>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Awaken.Contracts.SwapExchangeContract.Path> PathMap {
      get { return pathMap_; }
    }

    /// <summary>Field number for the "swap_token_list" field.</summary>
    public const int SwapTokenListFieldNumber = 2;
    private global::Awaken.Contracts.SwapExchangeContract.TokenList swapTokenList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Awaken.Contracts.SwapExchangeContract.TokenList SwapTokenList {
      get { return swapTokenList_; }
      set {
        swapTokenList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapTokensInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapTokensInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PathMap.Equals(other.PathMap)) return false;
      if (!object.Equals(SwapTokenList, other.SwapTokenList)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PathMap.GetHashCode();
      if (swapTokenList_ != null) hash ^= SwapTokenList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pathMap_.WriteTo(output, _map_pathMap_codec);
      if (swapTokenList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SwapTokenList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pathMap_.CalculateSize(_map_pathMap_codec);
      if (swapTokenList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwapTokenList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapTokensInput other) {
      if (other == null) {
        return;
      }
      pathMap_.Add(other.pathMap_);
      if (other.swapTokenList_ != null) {
        if (swapTokenList_ == null) {
          SwapTokenList = new global::Awaken.Contracts.SwapExchangeContract.TokenList();
        }
        SwapTokenList.MergeFrom(other.SwapTokenList);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pathMap_.AddEntriesFrom(input, _map_pathMap_codec);
            break;
          }
          case 18: {
            if (swapTokenList_ == null) {
              SwapTokenList = new global::Awaken.Contracts.SwapExchangeContract.TokenList();
            }
            input.ReadMessage(SwapTokenList);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Token : pb::IMessage<Token> {
    private static readonly pb::MessageParser<Token> _parser = new pb::MessageParser<Token>(() => new Token());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Token> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token(Token other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token Clone() {
      return new Token(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Token);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Token other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Token other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TokenList : pb::IMessage<TokenList> {
    private static readonly pb::MessageParser<TokenList> _parser = new pb::MessageParser<TokenList>(() => new TokenList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenList(TokenList other) : this() {
      tokensInfo_ = other.tokensInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenList Clone() {
      return new TokenList(this);
    }

    /// <summary>Field number for the "tokens_info" field.</summary>
    public const int TokensInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Awaken.Contracts.SwapExchangeContract.Token> _repeated_tokensInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Awaken.Contracts.SwapExchangeContract.Token.Parser);
    private readonly pbc::RepeatedField<global::Awaken.Contracts.SwapExchangeContract.Token> tokensInfo_ = new pbc::RepeatedField<global::Awaken.Contracts.SwapExchangeContract.Token>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Awaken.Contracts.SwapExchangeContract.Token> TokensInfo {
      get { return tokensInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tokensInfo_.Equals(other.tokensInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tokensInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tokensInfo_.WriteTo(output, _repeated_tokensInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tokensInfo_.CalculateSize(_repeated_tokensInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenList other) {
      if (other == null) {
        return;
      }
      tokensInfo_.Add(other.tokensInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tokensInfo_.AddEntriesFrom(input, _repeated_tokensInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// output
  /// </summary>
  internal sealed partial class ThresholdOutput : pb::IMessage<ThresholdOutput> {
    private static readonly pb::MessageParser<ThresholdOutput> _parser = new pb::MessageParser<ThresholdOutput>(() => new ThresholdOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThresholdOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThresholdOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThresholdOutput(ThresholdOutput other) : this() {
      lpTokenThreshold_ = other.lpTokenThreshold_;
      commonTokenThreshold_ = other.commonTokenThreshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThresholdOutput Clone() {
      return new ThresholdOutput(this);
    }

    /// <summary>Field number for the "lp_token_threshold" field.</summary>
    public const int LpTokenThresholdFieldNumber = 1;
    private long lpTokenThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LpTokenThreshold {
      get { return lpTokenThreshold_; }
      set {
        lpTokenThreshold_ = value;
      }
    }

    /// <summary>Field number for the "common_token_threshold" field.</summary>
    public const int CommonTokenThresholdFieldNumber = 2;
    private long commonTokenThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommonTokenThreshold {
      get { return commonTokenThreshold_; }
      set {
        commonTokenThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThresholdOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThresholdOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LpTokenThreshold != other.LpTokenThreshold) return false;
      if (CommonTokenThreshold != other.CommonTokenThreshold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LpTokenThreshold != 0L) hash ^= LpTokenThreshold.GetHashCode();
      if (CommonTokenThreshold != 0L) hash ^= CommonTokenThreshold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LpTokenThreshold != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LpTokenThreshold);
      }
      if (CommonTokenThreshold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CommonTokenThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LpTokenThreshold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LpTokenThreshold);
      }
      if (CommonTokenThreshold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommonTokenThreshold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThresholdOutput other) {
      if (other == null) {
        return;
      }
      if (other.LpTokenThreshold != 0L) {
        LpTokenThreshold = other.LpTokenThreshold;
      }
      if (other.CommonTokenThreshold != 0L) {
        CommonTokenThreshold = other.CommonTokenThreshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LpTokenThreshold = input.ReadInt64();
            break;
          }
          case 16: {
            CommonTokenThreshold = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Event
  /// </summary>
  internal sealed partial class SwapResultEvent : pb::IMessage<SwapResultEvent> {
    private static readonly pb::MessageParser<SwapResultEvent> _parser = new pb::MessageParser<SwapResultEvent>(() => new SwapResultEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapResultEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.SwapExchangeContract.SwapExchangeContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapResultEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapResultEvent(SwapResultEvent other) : this() {
      symbol_ = other.symbol_;
      result_ = other.result_;
      amount_ = other.amount_;
      isLptoken_ = other.isLptoken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapResultEvent Clone() {
      return new SwapResultEvent(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "is_lptoken" field.</summary>
    public const int IsLptokenFieldNumber = 4;
    private bool isLptoken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLptoken {
      get { return isLptoken_; }
      set {
        isLptoken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapResultEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapResultEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Result != other.Result) return false;
      if (Amount != other.Amount) return false;
      if (IsLptoken != other.IsLptoken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Result != false) hash ^= Result.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (IsLptoken != false) hash ^= IsLptoken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Result != false) {
        output.WriteRawTag(16);
        output.WriteBool(Result);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (IsLptoken != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsLptoken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Result != false) {
        size += 1 + 1;
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (IsLptoken != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapResultEvent other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.IsLptoken != false) {
        IsLptoken = other.IsLptoken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Result = input.ReadBool();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
          case 32: {
            IsLptoken = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
