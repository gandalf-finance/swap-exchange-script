// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dividend_pool_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gandalf.Contracts.DividendPoolContract {

  /// <summary>Holder for reflection information generated from dividend_pool_contract.proto</summary>
  public static partial class DividendPoolContractReflection {

    #region Descriptor
    /// <summary>File descriptor for dividend_pool_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DividendPoolContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxkaXZpZGVuZF9wb29sX2NvbnRyYWN0LnByb3RvGg9hZWxmL2NvcmUucHJv",
            "dG8aEmFlbGYvb3B0aW9ucy5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5",
            "LnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8iLgoQQWNj",
            "UGVyU2hhcmVJbnB1dBILCgNwaWQYASABKAUSDQoFdG9rZW4YAiABKAkiSgoP",
            "UmV3YXJkRGVidElucHV0EgsKA3BpZBgBIAEoBRIbCgR1c2VyGAIgASgLMg0u",
            "YWVsZi5BZGRyZXNzEg0KBXRva2VuGAMgASgJIjkKDVVzZXJJbmZvSW5wdXQS",
            "CwoDcGlkGAEgASgFEhsKBHVzZXIYAiABKAsyDS5hZWxmLkFkZHJlc3MiPgoP",
            "SW5pdGlhbGl6ZUlucHV0Eg0KBWN5Y2xlGAEgASgFEhwKBW93bmVyGAIgASgL",
            "Mg0uYWVsZi5BZGRyZXNzIkIKEFRva2VuT3B0aW9uSW5wdXQSCwoDcGlkGAEg",
            "ASgFEiEKBmFtb3VudBgCIAEoCzIRLmFlbGYuQmlnSW50VmFsdWUiQwoNUGVu",
            "ZGluZ091dHB1dBIOCgZ0b2tlbnMYASADKAkSIgoHYW1vdW50cxgCIAMoCzIR",
            "LmFlbGYuQmlnSW50VmFsdWUiOAoMUGVuZGluZ0lucHV0EgsKA3BpZBgBIAEo",
            "BRIbCgR1c2VyGAIgASgLMg0uYWVsZi5BZGRyZXNzIhYKBVRva2VuEg0KBXZh",
            "bHVlGAEgASgJIoABCg5OZXdSZXdhcmRJbnB1dBIOCgZ0b2tlbnMYASADKAkS",
            "JQoKcGVyX2Jsb2NrcxgCIAMoCzIRLmFlbGYuQmlnSW50VmFsdWUSIgoHYW1v",
            "dW50cxgDIAMoCzIRLmFlbGYuQmlnSW50VmFsdWUSEwoLc3RhcnRfYmxvY2sY",
            "BCABKAMiUwoMQWRkUG9vbElucHV0EhgKEGFsbG9jYXRpb25fcG9pbnQYASAB",
            "KAMSFAoMdG9rZW5fc3ltYm9sGAIgASgJEhMKC3dpdGhfdXBkYXRlGAMgASgI",
            "IkoKDFNldFBvb2xJbnB1dBILCgNwaWQYASABKAUSGAoQYWxsb2NhdGlvbl9w",
            "b2ludBgCIAEoAxITCgt3aXRoX3VwZGF0ZRgDIAEoCCKRAQoKVXBkYXRlUG9v",
            "bBILCgNwaWQYASABKAUSDQoFdG9rZW4YAiABKAkSIQoGcmV3YXJkGAMgASgL",
            "MhEuYWVsZi5CaWdJbnRWYWx1ZRIoCg1hY2NfcGVyX3NoYXJlGAQgASgLMhEu",
            "YWVsZi5CaWdJbnRWYWx1ZRIUCgxibG9ja19oZWlnaHQYBSABKAM6BKC7GAEi",
            "aQoHSGFydmVzdBIZCgJ0bxgBIAEoCzINLmFlbGYuQWRkcmVzcxIhCgZhbW91",
            "bnQYAiABKAsyES5hZWxmLkJpZ0ludFZhbHVlEg0KBXRva2VuGAMgASgJEgsK",
            "A3BpZBgEIAEoBToEoLsYASJcCgdEZXBvc2l0EhsKBHVzZXIYASABKAsyDS5h",
            "ZWxmLkFkZHJlc3MSCwoDcGlkGAIgASgFEiEKBmFtb3VudBgDIAEoCzIRLmFl",
            "bGYuQmlnSW50VmFsdWU6BKC7GAEiXQoIV2l0aGRyYXcSGwoEdXNlchgBIAEo",
            "CzINLmFlbGYuQWRkcmVzcxILCgNwaWQYAiABKAUSIQoGYW1vdW50GAMgASgL",
            "MhEuYWVsZi5CaWdJbnRWYWx1ZToEoLsYASIfCghTZXRDeWNsZRINCgVjeWNs",
            "ZRgBIAEoBToEoLsYASI1CghBZGRUb2tlbhIUCgx0b2tlbl9zeW1ib2wYASAB",
            "KAkSDQoFaW5kZXgYAiABKAU6BKC7GAEikgEKCU5ld1Jld2FyZBINCgV0b2tl",
            "bhgBIAEoCRIlCgpwZXJfYmxvY2tzGAIgASgLMhEuYWVsZi5CaWdJbnRWYWx1",
            "ZRIhCgZhbW91bnQYAyABKAsyES5hZWxmLkJpZ0ludFZhbHVlEhMKC3N0YXJ0",
            "X2Jsb2NrGAQgASgDEhEKCWVuZF9ibG9jaxgFIAEoAzoEoLsYASJbCgdBZGRQ",
            "b29sEg0KBXRva2VuGAEgASgJEhMKC2FsbG9jX3BvaW50GAIgASgDEhkKEWxh",
            "c3RfcmV3YXJkX2Jsb2NrGAMgASgDEgsKA3BpZBgEIAEoBToEoLsYASJJCgdT",
            "ZXRQb29sEgsKA3BpZBgBIAEoBRIrChBhbGxvY2F0aW9uX3BvaW50GAIgASgL",
            "MhEuYWVsZi5CaWdJbnRWYWx1ZToEoLsYASIoCgRVc2VyEiAKBXZhbHVlGAEg",
            "ASgLMhEuYWVsZi5CaWdJbnRWYWx1ZSJxCgRQb29sEhAKCGxwX3Rva2VuGAEg",
            "ASgJEhMKC2FsbG9jX3BvaW50GAIgASgDEhkKEWxhc3RfcmV3YXJkX2Jsb2Nr",
            "GAMgASgDEicKDHRvdGFsX2Ftb3VudBgEIAEoCzIRLmFlbGYuQmlnSW50VmFs",
            "dWUiGgoJVG9rZW5MaXN0Eg0KBXZhbHVlGAEgAygJIiQKDFBvb2xJbmZvTGlz",
            "dBIUCgV2YWx1ZRgBIAMoCzIFLlBvb2wy6QwKFERpdmlkZW5kUG9vbENvbnRy",
            "YWN0EjgKCkluaXRpYWxpemUSEC5Jbml0aWFsaXplSW5wdXQaFi5nb29nbGUu",
            "cHJvdG9idWYuRW1wdHkiABIsCghBZGRUb2tlbhIGLlRva2VuGhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5IgASNgoJTmV3UmV3YXJkEg8uTmV3UmV3YXJkSW5w",
            "dXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJBCghTZXRDeWNsZRIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlGhYuZ29vZ2xlLnByb3RvYnVmLkVt",
            "cHR5IgASLgoDQWRkEg0uQWRkUG9vbElucHV0GhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASLgoDU2V0Eg0uU2V0UG9vbElucHV0GhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IgASQwoPTWFzc1VwZGF0ZVBvb2xzEhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASQwoKVXBkYXRl",
            "UG9vbBIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlGhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASNgoHRGVwb3NpdBIRLlRva2VuT3B0aW9uSW5wdXQa",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI3CghXaXRoZHJhdxIRLlRva2Vu",
            "T3B0aW9uSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIvCgdQZW5k",
            "aW5nEg0uUGVuZGluZ0lucHV0Gg4uUGVuZGluZ091dHB1dCIFiIn3AQESSAoK",
            "UG9vbExlbmd0aBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRobLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQzMlZhbHVlIgWIifcBARJQChJHZXRUb2tlbkxpc3RMZW5n",
            "dGgSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaGy5nb29nbGUucHJvdG9idWYu",
            "SW50MzJWYWx1ZSIFiIn3AQESOAoLSXNUb2tlbkxpc3QSBi5Ub2tlbhoaLmdv",
            "b2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUiBYiJ9wEBEjUKBU93bmVyEhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5Gg0uYWVsZi5BZGRyZXNzIgWIifcBARJNCglU",
            "b2tlbkxpc3QSGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRocLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZSIFiIn3AQESQgoIUGVyQmxvY2sSHC5n",
            "b29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUaES5hZWxmLkJpZ0ludFZhbHVl",
            "IgWIifcBARI1CghQb29sSW5mbxIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZh",
            "bHVlGgUuUG9vbCIFiIn3AQESKAoIVXNlckluZm8SDi5Vc2VySW5mb0lucHV0",
            "GgUuVXNlciIFiIn3AQESTQoPVG90YWxBbGxvY1BvaW50EhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5GhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUiBYiJ",
            "9wEBEkgKClN0YXJ0QmxvY2sSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaGy5n",
            "b29nbGUucHJvdG9idWYuSW50NjRWYWx1ZSIFiIn3AQESRgoIRW5kQmxvY2sS",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkaGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZSIFiIn3AQESQwoFQ3ljbGUSFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkaGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZSIFiIn3AQESOAoKUmV3",
            "YXJkRGVidBIQLlJld2FyZERlYnRJbnB1dBoRLmFlbGYuQmlnSW50VmFsdWUi",
            "BYiJ9wEBEjoKC0FjY1BlclNoYXJlEhEuQWNjUGVyU2hhcmVJbnB1dBoRLmFl",
            "bGYuQmlnSW50VmFsdWUiBYiJ9wEBGkWyzPYBQEdhbmRhbGYuQ29udHJhY3Rz",
            "LkRpdmlkZW5kUG9vbENvbnRyYWN0LkRpdmlkZW5kUG9vbENvbnRyYWN0U3Rh",
            "dGVCKaoCJkdhbmRhbGYuQ29udHJhY3RzLkRpdmlkZW5kUG9vbENvbnRyYWN0",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.AccPerShareInput), global::Gandalf.Contracts.DividendPoolContract.AccPerShareInput.Parser, new[]{ "Pid", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.RewardDebtInput), global::Gandalf.Contracts.DividendPoolContract.RewardDebtInput.Parser, new[]{ "Pid", "User", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.UserInfoInput), global::Gandalf.Contracts.DividendPoolContract.UserInfoInput.Parser, new[]{ "Pid", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.InitializeInput), global::Gandalf.Contracts.DividendPoolContract.InitializeInput.Parser, new[]{ "Cycle", "Owner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.TokenOptionInput), global::Gandalf.Contracts.DividendPoolContract.TokenOptionInput.Parser, new[]{ "Pid", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.PendingOutput), global::Gandalf.Contracts.DividendPoolContract.PendingOutput.Parser, new[]{ "Tokens", "Amounts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.PendingInput), global::Gandalf.Contracts.DividendPoolContract.PendingInput.Parser, new[]{ "Pid", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.Token), global::Gandalf.Contracts.DividendPoolContract.Token.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.NewRewardInput), global::Gandalf.Contracts.DividendPoolContract.NewRewardInput.Parser, new[]{ "Tokens", "PerBlocks", "Amounts", "StartBlock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.AddPoolInput), global::Gandalf.Contracts.DividendPoolContract.AddPoolInput.Parser, new[]{ "AllocationPoint", "TokenSymbol", "WithUpdate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.SetPoolInput), global::Gandalf.Contracts.DividendPoolContract.SetPoolInput.Parser, new[]{ "Pid", "AllocationPoint", "WithUpdate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.UpdatePool), global::Gandalf.Contracts.DividendPoolContract.UpdatePool.Parser, new[]{ "Pid", "Token", "Reward", "AccPerShare", "BlockHeight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.Harvest), global::Gandalf.Contracts.DividendPoolContract.Harvest.Parser, new[]{ "To", "Amount", "Token", "Pid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.Deposit), global::Gandalf.Contracts.DividendPoolContract.Deposit.Parser, new[]{ "User", "Pid", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.Withdraw), global::Gandalf.Contracts.DividendPoolContract.Withdraw.Parser, new[]{ "User", "Pid", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.SetCycle), global::Gandalf.Contracts.DividendPoolContract.SetCycle.Parser, new[]{ "Cycle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.AddToken), global::Gandalf.Contracts.DividendPoolContract.AddToken.Parser, new[]{ "TokenSymbol", "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.NewReward), global::Gandalf.Contracts.DividendPoolContract.NewReward.Parser, new[]{ "Token", "PerBlocks", "Amount", "StartBlock", "EndBlock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.AddPool), global::Gandalf.Contracts.DividendPoolContract.AddPool.Parser, new[]{ "Token", "AllocPoint", "LastRewardBlock", "Pid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.SetPool), global::Gandalf.Contracts.DividendPoolContract.SetPool.Parser, new[]{ "Pid", "AllocationPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.User), global::Gandalf.Contracts.DividendPoolContract.User.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.Pool), global::Gandalf.Contracts.DividendPoolContract.Pool.Parser, new[]{ "LpToken", "AllocPoint", "LastRewardBlock", "TotalAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.TokenList), global::Gandalf.Contracts.DividendPoolContract.TokenList.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gandalf.Contracts.DividendPoolContract.PoolInfoList), global::Gandalf.Contracts.DividendPoolContract.PoolInfoList.Parser, new[]{ "Value" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AccPerShareInput : pb::IMessage<AccPerShareInput> {
    private static readonly pb::MessageParser<AccPerShareInput> _parser = new pb::MessageParser<AccPerShareInput>(() => new AccPerShareInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccPerShareInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccPerShareInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccPerShareInput(AccPerShareInput other) : this() {
      pid_ = other.pid_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccPerShareInput Clone() {
      return new AccPerShareInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccPerShareInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccPerShareInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccPerShareInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RewardDebtInput : pb::IMessage<RewardDebtInput> {
    private static readonly pb::MessageParser<RewardDebtInput> _parser = new pb::MessageParser<RewardDebtInput>(() => new RewardDebtInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardDebtInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardDebtInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardDebtInput(RewardDebtInput other) : this() {
      pid_ = other.pid_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardDebtInput Clone() {
      return new RewardDebtInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RewardDebtInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RewardDebtInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RewardDebtInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfoInput : pb::IMessage<UserInfoInput> {
    private static readonly pb::MessageParser<UserInfoInput> _parser = new pb::MessageParser<UserInfoInput>(() => new UserInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoInput(UserInfoInput other) : this() {
      pid_ = other.pid_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoInput Clone() {
      return new UserInfoInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      cycle_ = other.cycle_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "cycle" field.</summary>
    public const int CycleFieldNumber = 1;
    private int cycle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cycle {
      get { return cycle_; }
      set {
        cycle_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Types.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cycle != other.Cycle) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cycle != 0) hash ^= Cycle.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cycle != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cycle);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cycle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cycle);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.Cycle != 0) {
        Cycle = other.Cycle;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cycle = input.ReadInt32();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TokenOptionInput : pb::IMessage<TokenOptionInput> {
    private static readonly pb::MessageParser<TokenOptionInput> _parser = new pb::MessageParser<TokenOptionInput>(() => new TokenOptionInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenOptionInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenOptionInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenOptionInput(TokenOptionInput other) : this() {
      pid_ = other.pid_;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenOptionInput Clone() {
      return new TokenOptionInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenOptionInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenOptionInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (amount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenOptionInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PendingOutput : pb::IMessage<PendingOutput> {
    private static readonly pb::MessageParser<PendingOutput> _parser = new pb::MessageParser<PendingOutput>(() => new PendingOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingOutput(PendingOutput other) : this() {
      tokens_ = other.tokens_.Clone();
      amounts_ = other.amounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingOutput Clone() {
      return new PendingOutput(this);
    }

    /// <summary>Field number for the "tokens" field.</summary>
    public const int TokensFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_tokens_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> tokens_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tokens {
      get { return tokens_; }
    }

    /// <summary>Field number for the "amounts" field.</summary>
    public const int AmountsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AElf.Types.BigIntValue> _repeated_amounts_codec
        = pb::FieldCodec.ForMessage(18, global::AElf.Types.BigIntValue.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.BigIntValue> amounts_ = new pbc::RepeatedField<global::AElf.Types.BigIntValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.BigIntValue> Amounts {
      get { return amounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tokens_.Equals(other.tokens_)) return false;
      if(!amounts_.Equals(other.amounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tokens_.GetHashCode();
      hash ^= amounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tokens_.WriteTo(output, _repeated_tokens_codec);
      amounts_.WriteTo(output, _repeated_amounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tokens_.CalculateSize(_repeated_tokens_codec);
      size += amounts_.CalculateSize(_repeated_amounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingOutput other) {
      if (other == null) {
        return;
      }
      tokens_.Add(other.tokens_);
      amounts_.Add(other.amounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tokens_.AddEntriesFrom(input, _repeated_tokens_codec);
            break;
          }
          case 18: {
            amounts_.AddEntriesFrom(input, _repeated_amounts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PendingInput : pb::IMessage<PendingInput> {
    private static readonly pb::MessageParser<PendingInput> _parser = new pb::MessageParser<PendingInput>(() => new PendingInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingInput(PendingInput other) : this() {
      pid_ = other.pid_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingInput Clone() {
      return new PendingInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Token : pb::IMessage<Token> {
    private static readonly pb::MessageParser<Token> _parser = new pb::MessageParser<Token>(() => new Token());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Token> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token(Token other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Token Clone() {
      return new Token(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Token);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Token other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Token other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewRewardInput : pb::IMessage<NewRewardInput> {
    private static readonly pb::MessageParser<NewRewardInput> _parser = new pb::MessageParser<NewRewardInput>(() => new NewRewardInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewRewardInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRewardInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRewardInput(NewRewardInput other) : this() {
      tokens_ = other.tokens_.Clone();
      perBlocks_ = other.perBlocks_.Clone();
      amounts_ = other.amounts_.Clone();
      startBlock_ = other.startBlock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRewardInput Clone() {
      return new NewRewardInput(this);
    }

    /// <summary>Field number for the "tokens" field.</summary>
    public const int TokensFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_tokens_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> tokens_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tokens {
      get { return tokens_; }
    }

    /// <summary>Field number for the "per_blocks" field.</summary>
    public const int PerBlocksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AElf.Types.BigIntValue> _repeated_perBlocks_codec
        = pb::FieldCodec.ForMessage(18, global::AElf.Types.BigIntValue.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.BigIntValue> perBlocks_ = new pbc::RepeatedField<global::AElf.Types.BigIntValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.BigIntValue> PerBlocks {
      get { return perBlocks_; }
    }

    /// <summary>Field number for the "amounts" field.</summary>
    public const int AmountsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Types.BigIntValue> _repeated_amounts_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Types.BigIntValue.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.BigIntValue> amounts_ = new pbc::RepeatedField<global::AElf.Types.BigIntValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.BigIntValue> Amounts {
      get { return amounts_; }
    }

    /// <summary>Field number for the "start_block" field.</summary>
    public const int StartBlockFieldNumber = 4;
    private long startBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartBlock {
      get { return startBlock_; }
      set {
        startBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewRewardInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewRewardInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tokens_.Equals(other.tokens_)) return false;
      if(!perBlocks_.Equals(other.perBlocks_)) return false;
      if(!amounts_.Equals(other.amounts_)) return false;
      if (StartBlock != other.StartBlock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tokens_.GetHashCode();
      hash ^= perBlocks_.GetHashCode();
      hash ^= amounts_.GetHashCode();
      if (StartBlock != 0L) hash ^= StartBlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tokens_.WriteTo(output, _repeated_tokens_codec);
      perBlocks_.WriteTo(output, _repeated_perBlocks_codec);
      amounts_.WriteTo(output, _repeated_amounts_codec);
      if (StartBlock != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartBlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tokens_.CalculateSize(_repeated_tokens_codec);
      size += perBlocks_.CalculateSize(_repeated_perBlocks_codec);
      size += amounts_.CalculateSize(_repeated_amounts_codec);
      if (StartBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartBlock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewRewardInput other) {
      if (other == null) {
        return;
      }
      tokens_.Add(other.tokens_);
      perBlocks_.Add(other.perBlocks_);
      amounts_.Add(other.amounts_);
      if (other.StartBlock != 0L) {
        StartBlock = other.StartBlock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tokens_.AddEntriesFrom(input, _repeated_tokens_codec);
            break;
          }
          case 18: {
            perBlocks_.AddEntriesFrom(input, _repeated_perBlocks_codec);
            break;
          }
          case 26: {
            amounts_.AddEntriesFrom(input, _repeated_amounts_codec);
            break;
          }
          case 32: {
            StartBlock = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddPoolInput : pb::IMessage<AddPoolInput> {
    private static readonly pb::MessageParser<AddPoolInput> _parser = new pb::MessageParser<AddPoolInput>(() => new AddPoolInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPoolInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPoolInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPoolInput(AddPoolInput other) : this() {
      allocationPoint_ = other.allocationPoint_;
      tokenSymbol_ = other.tokenSymbol_;
      withUpdate_ = other.withUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPoolInput Clone() {
      return new AddPoolInput(this);
    }

    /// <summary>Field number for the "allocation_point" field.</summary>
    public const int AllocationPointFieldNumber = 1;
    private long allocationPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocationPoint {
      get { return allocationPoint_; }
      set {
        allocationPoint_ = value;
      }
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 2;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "with_update" field.</summary>
    public const int WithUpdateFieldNumber = 3;
    private bool withUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithUpdate {
      get { return withUpdate_; }
      set {
        withUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPoolInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPoolInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllocationPoint != other.AllocationPoint) return false;
      if (TokenSymbol != other.TokenSymbol) return false;
      if (WithUpdate != other.WithUpdate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllocationPoint != 0L) hash ^= AllocationPoint.GetHashCode();
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (WithUpdate != false) hash ^= WithUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllocationPoint != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllocationPoint);
      }
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenSymbol);
      }
      if (WithUpdate != false) {
        output.WriteRawTag(24);
        output.WriteBool(WithUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllocationPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocationPoint);
      }
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (WithUpdate != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPoolInput other) {
      if (other == null) {
        return;
      }
      if (other.AllocationPoint != 0L) {
        AllocationPoint = other.AllocationPoint;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.WithUpdate != false) {
        WithUpdate = other.WithUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllocationPoint = input.ReadInt64();
            break;
          }
          case 18: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 24: {
            WithUpdate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetPoolInput : pb::IMessage<SetPoolInput> {
    private static readonly pb::MessageParser<SetPoolInput> _parser = new pb::MessageParser<SetPoolInput>(() => new SetPoolInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPoolInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolInput(SetPoolInput other) : this() {
      pid_ = other.pid_;
      allocationPoint_ = other.allocationPoint_;
      withUpdate_ = other.withUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPoolInput Clone() {
      return new SetPoolInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "allocation_point" field.</summary>
    public const int AllocationPointFieldNumber = 2;
    private long allocationPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocationPoint {
      get { return allocationPoint_; }
      set {
        allocationPoint_ = value;
      }
    }

    /// <summary>Field number for the "with_update" field.</summary>
    public const int WithUpdateFieldNumber = 3;
    private bool withUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithUpdate {
      get { return withUpdate_; }
      set {
        withUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPoolInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPoolInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (AllocationPoint != other.AllocationPoint) return false;
      if (WithUpdate != other.WithUpdate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (AllocationPoint != 0L) hash ^= AllocationPoint.GetHashCode();
      if (WithUpdate != false) hash ^= WithUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (AllocationPoint != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AllocationPoint);
      }
      if (WithUpdate != false) {
        output.WriteRawTag(24);
        output.WriteBool(WithUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (AllocationPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocationPoint);
      }
      if (WithUpdate != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPoolInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.AllocationPoint != 0L) {
        AllocationPoint = other.AllocationPoint;
      }
      if (other.WithUpdate != false) {
        WithUpdate = other.WithUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            AllocationPoint = input.ReadInt64();
            break;
          }
          case 24: {
            WithUpdate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatePool : pb::IMessage<UpdatePool> {
    private static readonly pb::MessageParser<UpdatePool> _parser = new pb::MessageParser<UpdatePool>(() => new UpdatePool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePool(UpdatePool other) : this() {
      pid_ = other.pid_;
      token_ = other.token_;
      reward_ = other.reward_ != null ? other.reward_.Clone() : null;
      accPerShare_ = other.accPerShare_ != null ? other.accPerShare_.Clone() : null;
      blockHeight_ = other.blockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePool Clone() {
      return new UpdatePool(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private global::AElf.Types.BigIntValue reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "acc_per_share" field.</summary>
    public const int AccPerShareFieldNumber = 4;
    private global::AElf.Types.BigIntValue accPerShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue AccPerShare {
      get { return accPerShare_; }
      set {
        accPerShare_ = value;
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 5;
    private long blockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (Token != other.Token) return false;
      if (!object.Equals(Reward, other.Reward)) return false;
      if (!object.Equals(AccPerShare, other.AccPerShare)) return false;
      if (BlockHeight != other.BlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (reward_ != null) hash ^= Reward.GetHashCode();
      if (accPerShare_ != null) hash ^= AccPerShare.GetHashCode();
      if (BlockHeight != 0L) hash ^= BlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (reward_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Reward);
      }
      if (accPerShare_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AccPerShare);
      }
      if (BlockHeight != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(BlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (accPerShare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccPerShare);
      }
      if (BlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePool other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          Reward = new global::AElf.Types.BigIntValue();
        }
        Reward.MergeFrom(other.Reward);
      }
      if (other.accPerShare_ != null) {
        if (accPerShare_ == null) {
          AccPerShare = new global::AElf.Types.BigIntValue();
        }
        AccPerShare.MergeFrom(other.AccPerShare);
      }
      if (other.BlockHeight != 0L) {
        BlockHeight = other.BlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            if (reward_ == null) {
              Reward = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Reward);
            break;
          }
          case 34: {
            if (accPerShare_ == null) {
              AccPerShare = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(AccPerShare);
            break;
          }
          case 40: {
            BlockHeight = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Harvest : pb::IMessage<Harvest> {
    private static readonly pb::MessageParser<Harvest> _parser = new pb::MessageParser<Harvest>(() => new Harvest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Harvest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Harvest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Harvest(Harvest other) : this() {
      to_ = other.to_ != null ? other.to_.Clone() : null;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      token_ = other.token_;
      pid_ = other.pid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Harvest Clone() {
      return new Harvest(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 4;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Harvest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Harvest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(To, other.To)) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      if (Token != other.Token) return false;
      if (Pid != other.Pid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (to_ != null) hash ^= To.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (to_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(To);
      }
      if (amount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Amount);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (Pid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Pid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Harvest other) {
      if (other == null) {
        return;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 18: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 32: {
            Pid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Deposit : pb::IMessage<Deposit> {
    private static readonly pb::MessageParser<Deposit> _parser = new pb::MessageParser<Deposit>(() => new Deposit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Deposit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deposit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deposit(Deposit other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      pid_ = other.pid_;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deposit Clone() {
      return new Deposit(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Deposit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Deposit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Pid != other.Pid) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      if (amount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Deposit other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 26: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Withdraw : pb::IMessage<Withdraw> {
    private static readonly pb::MessageParser<Withdraw> _parser = new pb::MessageParser<Withdraw>(() => new Withdraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Withdraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw(Withdraw other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      pid_ = other.pid_;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw Clone() {
      return new Withdraw(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Withdraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Withdraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Pid != other.Pid) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      if (amount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Withdraw other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 26: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetCycle : pb::IMessage<SetCycle> {
    private static readonly pb::MessageParser<SetCycle> _parser = new pb::MessageParser<SetCycle>(() => new SetCycle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetCycle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCycle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCycle(SetCycle other) : this() {
      cycle_ = other.cycle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetCycle Clone() {
      return new SetCycle(this);
    }

    /// <summary>Field number for the "cycle" field.</summary>
    public const int CycleFieldNumber = 1;
    private int cycle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cycle {
      get { return cycle_; }
      set {
        cycle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetCycle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetCycle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cycle != other.Cycle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cycle != 0) hash ^= Cycle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cycle != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cycle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cycle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cycle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetCycle other) {
      if (other == null) {
        return;
      }
      if (other.Cycle != 0) {
        Cycle = other.Cycle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cycle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddToken : pb::IMessage<AddToken> {
    private static readonly pb::MessageParser<AddToken> _parser = new pb::MessageParser<AddToken>(() => new AddToken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddToken(AddToken other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddToken Clone() {
      return new AddToken(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddToken other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewReward : pb::IMessage<NewReward> {
    private static readonly pb::MessageParser<NewReward> _parser = new pb::MessageParser<NewReward>(() => new NewReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewReward(NewReward other) : this() {
      token_ = other.token_;
      perBlocks_ = other.perBlocks_ != null ? other.perBlocks_.Clone() : null;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      startBlock_ = other.startBlock_;
      endBlock_ = other.endBlock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewReward Clone() {
      return new NewReward(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "per_blocks" field.</summary>
    public const int PerBlocksFieldNumber = 2;
    private global::AElf.Types.BigIntValue perBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue PerBlocks {
      get { return perBlocks_; }
      set {
        perBlocks_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "start_block" field.</summary>
    public const int StartBlockFieldNumber = 4;
    private long startBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartBlock {
      get { return startBlock_; }
      set {
        startBlock_ = value;
      }
    }

    /// <summary>Field number for the "end_block" field.</summary>
    public const int EndBlockFieldNumber = 5;
    private long endBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndBlock {
      get { return endBlock_; }
      set {
        endBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (!object.Equals(PerBlocks, other.PerBlocks)) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      if (StartBlock != other.StartBlock) return false;
      if (EndBlock != other.EndBlock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (perBlocks_ != null) hash ^= PerBlocks.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (StartBlock != 0L) hash ^= StartBlock.GetHashCode();
      if (EndBlock != 0L) hash ^= EndBlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (perBlocks_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PerBlocks);
      }
      if (amount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Amount);
      }
      if (StartBlock != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartBlock);
      }
      if (EndBlock != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EndBlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (perBlocks_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PerBlocks);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (StartBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartBlock);
      }
      if (EndBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndBlock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewReward other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.perBlocks_ != null) {
        if (perBlocks_ == null) {
          PerBlocks = new global::AElf.Types.BigIntValue();
        }
        PerBlocks.MergeFrom(other.PerBlocks);
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      if (other.StartBlock != 0L) {
        StartBlock = other.StartBlock;
      }
      if (other.EndBlock != 0L) {
        EndBlock = other.EndBlock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            if (perBlocks_ == null) {
              PerBlocks = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(PerBlocks);
            break;
          }
          case 26: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
          case 32: {
            StartBlock = input.ReadInt64();
            break;
          }
          case 40: {
            EndBlock = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddPool : pb::IMessage<AddPool> {
    private static readonly pb::MessageParser<AddPool> _parser = new pb::MessageParser<AddPool>(() => new AddPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPool(AddPool other) : this() {
      token_ = other.token_;
      allocPoint_ = other.allocPoint_;
      lastRewardBlock_ = other.lastRewardBlock_;
      pid_ = other.pid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPool Clone() {
      return new AddPool(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alloc_point" field.</summary>
    public const int AllocPointFieldNumber = 2;
    private long allocPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocPoint {
      get { return allocPoint_; }
      set {
        allocPoint_ = value;
      }
    }

    /// <summary>Field number for the "last_reward_block" field.</summary>
    public const int LastRewardBlockFieldNumber = 3;
    private long lastRewardBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastRewardBlock {
      get { return lastRewardBlock_; }
      set {
        lastRewardBlock_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 4;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (AllocPoint != other.AllocPoint) return false;
      if (LastRewardBlock != other.LastRewardBlock) return false;
      if (Pid != other.Pid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (AllocPoint != 0L) hash ^= AllocPoint.GetHashCode();
      if (LastRewardBlock != 0L) hash ^= LastRewardBlock.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (AllocPoint != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AllocPoint);
      }
      if (LastRewardBlock != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastRewardBlock);
      }
      if (Pid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Pid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (AllocPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocPoint);
      }
      if (LastRewardBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRewardBlock);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPool other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.AllocPoint != 0L) {
        AllocPoint = other.AllocPoint;
      }
      if (other.LastRewardBlock != 0L) {
        LastRewardBlock = other.LastRewardBlock;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            AllocPoint = input.ReadInt64();
            break;
          }
          case 24: {
            LastRewardBlock = input.ReadInt64();
            break;
          }
          case 32: {
            Pid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetPool : pb::IMessage<SetPool> {
    private static readonly pb::MessageParser<SetPool> _parser = new pb::MessageParser<SetPool>(() => new SetPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPool(SetPool other) : this() {
      pid_ = other.pid_;
      allocationPoint_ = other.allocationPoint_ != null ? other.allocationPoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetPool Clone() {
      return new SetPool(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "allocation_point" field.</summary>
    public const int AllocationPointFieldNumber = 2;
    private global::AElf.Types.BigIntValue allocationPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue AllocationPoint {
      get { return allocationPoint_; }
      set {
        allocationPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(AllocationPoint, other.AllocationPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (allocationPoint_ != null) hash ^= AllocationPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (allocationPoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AllocationPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (allocationPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllocationPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetPool other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.allocationPoint_ != null) {
        if (allocationPoint_ == null) {
          AllocationPoint = new global::AElf.Types.BigIntValue();
        }
        AllocationPoint.MergeFrom(other.AllocationPoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (allocationPoint_ == null) {
              AllocationPoint = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(AllocationPoint);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///struct
  /// </summary>
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      value_ = other.value_ != null ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private global::AElf.Types.BigIntValue value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (value_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          Value = new global::AElf.Types.BigIntValue();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (value_ == null) {
              Value = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Value);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pool : pb::IMessage<Pool> {
    private static readonly pb::MessageParser<Pool> _parser = new pb::MessageParser<Pool>(() => new Pool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool(Pool other) : this() {
      lpToken_ = other.lpToken_;
      allocPoint_ = other.allocPoint_;
      lastRewardBlock_ = other.lastRewardBlock_;
      totalAmount_ = other.totalAmount_ != null ? other.totalAmount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pool Clone() {
      return new Pool(this);
    }

    /// <summary>Field number for the "lp_token" field.</summary>
    public const int LpTokenFieldNumber = 1;
    private string lpToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LpToken {
      get { return lpToken_; }
      set {
        lpToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alloc_point" field.</summary>
    public const int AllocPointFieldNumber = 2;
    private long allocPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocPoint {
      get { return allocPoint_; }
      set {
        allocPoint_ = value;
      }
    }

    /// <summary>Field number for the "last_reward_block" field.</summary>
    public const int LastRewardBlockFieldNumber = 3;
    private long lastRewardBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastRewardBlock {
      get { return lastRewardBlock_; }
      set {
        lastRewardBlock_ = value;
      }
    }

    /// <summary>Field number for the "total_amount" field.</summary>
    public const int TotalAmountFieldNumber = 4;
    private global::AElf.Types.BigIntValue totalAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue TotalAmount {
      get { return totalAmount_; }
      set {
        totalAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LpToken != other.LpToken) return false;
      if (AllocPoint != other.AllocPoint) return false;
      if (LastRewardBlock != other.LastRewardBlock) return false;
      if (!object.Equals(TotalAmount, other.TotalAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LpToken.Length != 0) hash ^= LpToken.GetHashCode();
      if (AllocPoint != 0L) hash ^= AllocPoint.GetHashCode();
      if (LastRewardBlock != 0L) hash ^= LastRewardBlock.GetHashCode();
      if (totalAmount_ != null) hash ^= TotalAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LpToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LpToken);
      }
      if (AllocPoint != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AllocPoint);
      }
      if (LastRewardBlock != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastRewardBlock);
      }
      if (totalAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TotalAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LpToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LpToken);
      }
      if (AllocPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocPoint);
      }
      if (LastRewardBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRewardBlock);
      }
      if (totalAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pool other) {
      if (other == null) {
        return;
      }
      if (other.LpToken.Length != 0) {
        LpToken = other.LpToken;
      }
      if (other.AllocPoint != 0L) {
        AllocPoint = other.AllocPoint;
      }
      if (other.LastRewardBlock != 0L) {
        LastRewardBlock = other.LastRewardBlock;
      }
      if (other.totalAmount_ != null) {
        if (totalAmount_ == null) {
          TotalAmount = new global::AElf.Types.BigIntValue();
        }
        TotalAmount.MergeFrom(other.TotalAmount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LpToken = input.ReadString();
            break;
          }
          case 16: {
            AllocPoint = input.ReadInt64();
            break;
          }
          case 24: {
            LastRewardBlock = input.ReadInt64();
            break;
          }
          case 34: {
            if (totalAmount_ == null) {
              TotalAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(TotalAmount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TokenList : pb::IMessage<TokenList> {
    private static readonly pb::MessageParser<TokenList> _parser = new pb::MessageParser<TokenList>(() => new TokenList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenList(TokenList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenList Clone() {
      return new TokenList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_value_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> value_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoolInfoList : pb::IMessage<PoolInfoList> {
    private static readonly pb::MessageParser<PoolInfoList> _parser = new pb::MessageParser<PoolInfoList>(() => new PoolInfoList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoolInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gandalf.Contracts.DividendPoolContract.DividendPoolContractReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfoList(PoolInfoList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfoList Clone() {
      return new PoolInfoList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gandalf.Contracts.DividendPoolContract.Pool> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::Gandalf.Contracts.DividendPoolContract.Pool.Parser);
    private readonly pbc::RepeatedField<global::Gandalf.Contracts.DividendPoolContract.Pool> value_ = new pbc::RepeatedField<global::Gandalf.Contracts.DividendPoolContract.Pool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gandalf.Contracts.DividendPoolContract.Pool> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoolInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoolInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoolInfoList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
